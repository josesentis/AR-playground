{"version":3,"sources":["pages/home/index.js","components/textScene/index.js","pages/scanner/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","Scene","content","preset","map","i","color","text","key","position","geometry","material","align","rotation","colors","Scanner","useState","loaded","setLoaded","setContent","useEffect","timer","setTimeout","clearTimeout","className","embedded","arjs","App","to","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAIeA,EAFF,kBAAM,oC,QCoBJC,EApBD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACE,oCACE,8BAAUC,OAAO,SACdD,EAAQE,KAAI,WAAkBC,GAAlB,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACX,8BACEC,IAAG,eAAUH,GACbI,SAAQ,cAAa,GAAJJ,GACjBK,SAAS,8CACTC,SAAS,iBACTC,MAAM,OACNC,SAAS,UACTN,KAAI,iBAAYD,EAAZ,4FAAqGC,EAArG,aCHVO,G,MAAS,CACb,CACEP,KAAM,qBACND,MAAO,OAET,CACEC,KAAM,qBACND,MAAO,QAET,CACEC,KAAM,qBACND,MAAO,YAkCIS,EA9BC,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACbC,EADa,KACLC,EADK,OAGUF,mBAAS,IAHnB,mBAGbd,EAHa,KAGJiB,EAHI,KAepB,OAVAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBJ,GAAU,GAEVC,EAAWL,KACV,KAEH,OAAO,kBAAMS,aAAaF,OAGvBJ,EAGH,yBAAKO,UAAU,SACb,6BAASC,UAAQ,EAACC,KAAK,yBAIrB,kBAAC,EAAD,CAAWxB,QAASA,IACpB,4CATc,0CCXPyB,G,MAtBH,kBACV,kBAAC,IAAD,KACE,wBAAIH,UAAU,UACZ,4BACE,kBAAC,IAAD,CAAMI,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGJ,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAAC,EAAD,WCZYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.775af3e7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => <p>Home</p>;\n\nexport default Home;","import React from \"react\";\n\nconst Scene = ({ content }) => {\n  return (\n    <>\n      <a-marker preset=\"kanji\">\n        {content.map(({ color, text }, i) => (\n          <a-entity\n            key={`text-${i}`}\n            position={`0 0 ${i * 0.5}`}\n            geometry=\"primitive: plane; width: auto; height: auto\"\n            material=\"color: #00aaff\"\n            align=\"left\"\n            rotation=\"-90 0 0\"\n            text={`color: ${color}; wrap-count: 10; font: https://cdn.aframe.io/fonts/Aileron-Semibold.fnt; value: ${text};`}\n          ></a-entity>\n        ))}\n      </a-marker>\n    </>\n  );\n};\n\nexport default Scene;\n","import React, { useEffect, useState } from \"react\";\n\n// import ImageScene from '../../components/imageScene';\n// import CustomScene from '../../components/customScene';\n// import HiroScene from '../../components/hiroScene';\nimport TextScene from \"../../components/textScene\";\n\nimport \"../../styles.css\";\n// import poster from './poster.png';\n// const text =\n// \"This is the text that I'm displaying on the text box. This is how it should be long enought to be cut down\";\nconst colors = [\n  {\n    text: \"first line of text\",\n    color: \"red\"\n  },\n  {\n    text: \"first line of text\",\n    color: \"blue\"\n  },\n  {\n    text: \"first line of text\",\n    color: \"yellow\"\n  }\n];\n\nconst Scanner = () => {\n  const [loaded, setLoaded] = useState(false);\n  // const [src, setSrc] = useState('');\n  const [content, setContent] = useState([]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoaded(true);\n      // setSrc(poster);\n      setContent(colors);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  });\n\n  if (!loaded) return <p>Loading...</p>;\n\n  return (\n    <div className=\"scene\">\n      <a-scene embedded arjs=\"trackingMethod: best;\">\n        {/* <ImageScene src={src} /> */}\n        {/* <HiroScene /> */}\n        {/* <CustomScene /> */}\n        <TextScene content={content} />\n        <a-camera-static />\n      </a-scene>\n    </div>\n  );\n};\n\nexport default Scanner;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Home from \"./pages/home\";\nimport Scanner from \"./pages/scanner\";\n\nimport './App.css';\n\nconst App = () => (\n  <Router>\n    <ul className=\"header\">\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/scanner\">Scanner</Link>\n      </li>\n    </ul>\n    <hr />\n    <Switch>\n      <Route path=\"/\" exact>\n        <Home />\n      </Route>\n      <Route path=\"/scanner\">\n        <Scanner />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}