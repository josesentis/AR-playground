{"version":3,"sources":["components/Box/index.js","components/Text/index.js","components/Image/index.js","components/Model/index.js","utils/history.js","components/App/styles.js","components/App/index.js","utils/helpers.js","serviceWorker.js","index.js"],"names":["Box","embedded","arjs","preset","position","material","Text","useState","text","setText","useEffect","temp","i","scale","rotation","geometry","value","color","align","wrap-count","font","negate","anchor","Image","id","src","alt","width","height","Model","mtl","side","attribute","dur","direction","from","to","repeat","history","createBrowserHistory","AppWrapper","styled","div","Scene","App","state","component","this","componentType","box","image","model","className","onChange","event","currentTarget","push","Object","keys","map","key","string","charAt","toUpperCase","slice","path","exact","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAWeA,EATH,kBACV,6BAASC,UAAQ,EAACC,KAAK,yBACrB,8BAAUC,OAAO,QACf,2BAAOC,SAAS,UAAUC,SAAS,oBAErC,4C,QCuCWC,EAxCF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAajB,OAVAC,qBAAU,WAGR,IAFA,IAAIC,EAAO,GAEFC,EAAI,EAAGA,GARF,EAQkBA,IAC9BD,GAAI,UAAOC,EAAI,EAAX,kBAAsBA,EAAI,EAA1B,qBAAwCA,EAThC,EASgD,KAAO,IAGrEH,EAAQE,KACP,IAGD,6BAASV,UAAQ,EAACC,KAAK,yBACrB,8BAAUC,OAAO,QACf,8BACEU,MAAM,QACNC,SAAS,UACTC,SAAQ,mCAtBJ,EAsBI,kBACRV,SAAS,iBAET,4BACEW,MAAOR,EACPS,MAAM,MACNb,SAAQ,WA5BN,EA4BoB,KAAd,QACRc,MAAM,OACNC,aA/BO,GAgCPC,KAAK,iCACLC,OAAO,QACPC,OAAO,OACPd,KAAK,OAIX,4CCnBSe,EAlBD,kBACZ,6BAAStB,UAAQ,EAACC,KAAK,yBACrB,kCACE,yBAAKsB,GAAG,QAAQC,IALV,qBAKoBC,IAAI,MAEhC,8BAAUvB,OAAO,QACf,6BACEwB,MAAM,IACNC,OAAO,IACPxB,SAAS,SACTU,SAAS,UACTW,IAAI,YAGR,4CCcWI,EA5BD,kBACZ,6BAAS5B,UAAQ,EAACC,KAAK,yBACrB,kCACE,kCAAcsB,GAAG,QAAQC,IAAI,uBAC7B,kCAAcD,GAAG,UAAUC,IAAI,wBAEjC,8BAAUtB,OAAO,QACf,iCACEsB,IAAI,SACJK,IAAI,WACJhB,SAAS,UACTiB,KAAK,SACL3B,SAAS,YACTS,MAAM,eAEN,iCAAamB,UAAU,WACrBC,IAAI,OACJC,UAAU,YACVC,KAAK,SACLC,GAAG,QACHC,OAAO,iBAIb,4C,OCxBWC,EAFCC,c,khBCAhB,IAAMC,EAAaC,IAAOC,IAAV,KAkBVC,EAAQF,IAAOC,IAAV,KAQIF,ICuBAI,E,2MAtCbC,MAAQ,CACNC,UAAW,S,wEAGH,IACAA,EAAcC,KAAKF,MAAnBC,UACFE,EAAgB,CACpBC,IAAKjD,EACLQ,KAAMF,EACN4C,MAAO3B,EACP4B,MAAOtB,GAET,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,4BACEuB,UAAU,qBACVpC,MAAO8B,EACPO,SAAU,SAAAC,GACR,IAAMR,EAAYQ,EAAMC,cAAcvC,MAEtCsB,EAAQkB,KAAR,WAAiBV,MAGlBW,OAAOC,KAAKV,GAAeW,KAAI,SAAAC,GAAG,OAAI,4BAAQA,IAAKA,EAAK5C,MAAO4C,IC/BzDC,ED+B0ED,GC9B7EE,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IADpC,IAAAH,MDiCT,kBAAClB,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,KAAK,IAAInB,UAAW9C,EAAKkE,OAAK,IACpCT,OAAOC,KAAKV,GAAeW,KAAI,SAAAC,GAAG,OAAI,kBAAC,IAAD,CAAOA,IAAKA,EAAKK,KAAI,WAAML,GAAOd,UAAWE,EAAcY,gB,GA9B9FO,IAAMC,WEAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1960c688.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Box = () => (\n  <a-scene embedded arjs=\"trackingMethod: best;\">\n    <a-marker preset=\"hiro\">\n      <a-box position=\"0 0.5 0\" material=\"color: yellow;\"></a-box>\n    </a-marker>\n    <a-camera-static />\n  </a-scene>\n);\n\nexport default Box;\n","import React, { useEffect, useState } from \"react\";\n\nconst WRAP_COUNT = 25;\nconst WIDTH = 6;\nconst MAX_LINES = 3;\n\nconst Text = () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    let temp = '';\n\n    for (let i = 0; i <= MAX_LINES; i++) {\n      temp += `${i + 1}. Line ${i + 1} of text. ${i < MAX_LINES ? '\\n' : ''}`;\n    }\n\n    setText(temp);\n  }, []);\n\n  return (\n    <a-scene embedded arjs=\"trackingMethod: best;\">\n      <a-marker preset=\"hiro\">\n        <a-entity\n          scale=\"2 2 2\"\n          rotation=\"-90 0 0\"\n          geometry={`primitive: plane; width: ${WIDTH}; height: auto`}\n          material=\"color: white;\"\n        >\n          <a-text\n            value={text}\n            color=\"red\"\n            position={`-${WIDTH / 1.95} 0 0`}\n            align=\"left\"\n            wrap-count={WRAP_COUNT}\n            font=\"fonts/Roobert-Medium-msdf.json\"\n            negate=\"false\"\n            anchor=\"left\"\n            text=\"\"\n          ></a-text>\n        </a-entity>\n      </a-marker>\n      <a-camera-static />\n    </a-scene>\n  );\n}\n\nexport default Text;\n","import React from \"react\";\n\nconst src = './images/image.png';\n\nconst Image = () => (\n  <a-scene embedded arjs=\"trackingMethod: best;\">\n    <a-assets>\n      <img id=\"image\" src={src} alt=\"\" />\n    </a-assets>\n    <a-marker preset=\"hiro\">\n      <a-image\n        width=\"4\"\n        height=\"4\"\n        position=\"0 -4 0\"\n        rotation=\"-90 0 0\"\n        src=\"#image\"\n      ></a-image>\n    </a-marker>\n    <a-camera-static />\n  </a-scene>\n);\n\nexport default Image;\n","import React from \"react\";\n\n// Try text in this link https://www.vectary.com/engine/engine.85c63e.html?model=196d0dbc-981b-42ec-a9ed-e1cdd175c2b5\n\nconst Model = () => (\n  <a-scene embedded arjs=\"trackingMethod: best;\">\n    <a-assets>\n      <a-asset-item id=\"model\" src=\"./models/model.obj\"></a-asset-item>\n      <a-asset-item id=\"texture\" src=\"./models/model.mtl\"></a-asset-item>\n    </a-assets>\n    <a-marker preset=\"hiro\">\n      <a-obj-model\n        src=\"#model\"\n        mtl=\"#texture\"\n        rotation=\"-90 0 0\"\n        side=\"double\"\n        position=\"0.0 0.2 0\"\n        scale=\"0.1 0.1 0.1\"\n      >\n        <a-animation attribute=\"position\"\n          dur=\"1000\"\n          direction=\"alternate\"\n          from=\"0 0 -1\"\n          to=\"0 0 1\"\n          repeat=\"indefinite\"\n        ></a-animation>\n      </a-obj-model>\n    </a-marker>\n    <a-camera-static />\n  </a-scene >\n);\n\nexport default Model;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import styled from 'styled-components';\n\nconst AppWrapper = styled.div`\n  .component-selector {\n    position: absolute;\n    z-index: 10;\n\n    @media only screen and (max-width: 639px) {\n      bottom: 30px;\n      left: 50%;\n      transform: translatex(-50%);\n    }\n\n    @media only screen and (min-width: 640px) {\n      top: 30px;\n      right: 30px;\n    }\n  }\n`;\n\nconst Scene = styled.div`\n  bottom: 0;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default AppWrapper;\nexport { Scene };\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Box from '../Box';\nimport Text from '../Text';\nimport Image from '../Image';\nimport Model from '../Model';\n\nimport { capitalize } from '../../utils/helpers'\nimport history from '../../utils/history'\nimport AppWrapper, { Scene } from './styles';\n\nclass App extends React.Component {\n  state = {\n    component: 'image'\n  };\n\n  render() {\n    const { component } = this.state;\n    const componentType = {\n      box: Box,\n      text: Text,\n      image: Image,\n      model: Model\n    };\n    return (\n      <AppWrapper>\n        <Router>\n          <select\n            className=\"component-selector\"\n            value={component}\n            onChange={event => {\n              const component = event.currentTarget.value;\n\n              history.push(`/${component}`);\n            }}\n          >\n            {Object.keys(componentType).map(key => <option key={key} value={key}>{capitalize(key)}</option>)}\n          </select>\n          <Scene>\n            <Switch>\n              <Route path='/' component={Box} exact />\n              {Object.keys(componentType).map(key => <Route key={key} path={`/${key}`} component={componentType[key]} />)}\n            </Switch>\n          </Scene>\n        </Router>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","const formatDateTime = datetime => {\n    const time = new Date(datetime);\n\n    return `${time.getHours()}:${time.getMinutes()}`;\n}\n\nconst capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport { formatDateTime, capitalize };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}